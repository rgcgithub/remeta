{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"remeta remeta is a collection of C++ programs for meta-analysis of single variants and gene-based tests using summary statistics from regenie . It is primarily designed to perform meta-analysis of gene-based tests using exome variants, and to perform conditional analysis of gene-based tests using imputed variants. The main features of remeta are: It performs burden, ACATV, and SKATO meta-analysis from single variant summary statistics. Annotations and gene-sets can be updated without re-analysis of individual-level data. It only needs a single LD file per study. It provides an efficient utility to compute and store LD matrices. It can meta-analyze both quantitative and binary traits. It very accurately estimates effect sizes, allele frequencies, and genotype counts of gene burden masks from single variant summary statistics. It performs effect-size meta-analysis and p-value meta-analysis of single variants. See the remeta tutorial for a step-by-step example. Citation Joseph, T., Mbatchou, J., et al. Computationally efficient meta-analysis of gene-based tests using summary statistics in large-scale genetic studies. medRxiv (2024). https://doi.org/10.1101/2024.12.06.24318617. License remeta is distributed under an MIT license. Contact If you have any question about remeta please contact jonathan.marchini@regeneron.com tyler.joseph@regeneron.com Please submit issues about remeta on Github .","title":"Home"},{"location":"#remeta","text":"remeta is a collection of C++ programs for meta-analysis of single variants and gene-based tests using summary statistics from regenie . It is primarily designed to perform meta-analysis of gene-based tests using exome variants, and to perform conditional analysis of gene-based tests using imputed variants. The main features of remeta are: It performs burden, ACATV, and SKATO meta-analysis from single variant summary statistics. Annotations and gene-sets can be updated without re-analysis of individual-level data. It only needs a single LD file per study. It provides an efficient utility to compute and store LD matrices. It can meta-analyze both quantitative and binary traits. It very accurately estimates effect sizes, allele frequencies, and genotype counts of gene burden masks from single variant summary statistics. It performs effect-size meta-analysis and p-value meta-analysis of single variants. See the remeta tutorial for a step-by-step example.","title":"remeta"},{"location":"#citation","text":"Joseph, T., Mbatchou, J., et al. Computationally efficient meta-analysis of gene-based tests using summary statistics in large-scale genetic studies. medRxiv (2024). https://doi.org/10.1101/2024.12.06.24318617.","title":"Citation"},{"location":"#license","text":"remeta is distributed under an MIT license.","title":"License"},{"location":"#contact","text":"If you have any question about remeta please contact jonathan.marchini@regeneron.com tyler.joseph@regeneron.com Please submit issues about remeta on Github .","title":"Contact"},{"location":"documentation/","text":"Documentation This pages documents the various options for each subprogram in remeta . Usage: remeta [OPTIONS] COMMAND [ARGS]... Options: -h [ --help ] Print this message and exit. -v [ --version ] Print version. Commands: * Meta-Analyses pvma Perform p-value meta-analysis. esma Perform effect size meta-analysis. gene Perform burden, SKATO, and ACATV meta-analysis. merge Merge results and compute meta-analysis GENEP. * Utilities compute-ref-ld Compute a reference LD matrix from plink2 pgen/pvar/psam files. index-anno Create an index from a bgzipped REGENIE annotation file. remeta gene Perform burden 1 , SKATO 2 , and ACATV 3 meta-analysis. Marginal testing Gene-based meta-analysis requires LD matrices computed by remeta compute-ref-ld . Each matrix is represented by three files: $PREFIX.remeta.gene.ld , $PREFIX.remeta.buffer.ld $PREFIX.remeta.ld.idx.gz . The prefix of each file is passed to the --ld-prefixes argument. These must be in the same order as the --htp and --cohorts arguments. remeta gene \\ --htp HTP1 HTP2 ... \\ --ld-prefixes LD_FILE1 LD_FILE2 ... \\ --cohorts COHORT1 COHORT2 ... \\ --anno-file ANNO_FILE \\ --set-list SET_LIST_FILE \\ --mask-def MASK_DEF_FILE \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX Conditional analysis Conditional analysis can be performed for gene-based tests using the --condition-htp and --condition-list arguments. The --condition-htp argument takes one HTP file per cohort and can be the same files passed to --htp . The --condition-list argument takes a file with variant IDs to condition on (one variant ID per line). remeta gene \\ --htp HTP1 HTP2 ... \\ --ld-prefixes LD_FILE1 LD_FILE2 ... \\ --cohorts COHORT1 COHORT2 ... \\ --anno-file ANNO_FILE \\ --set-list SET_LIST_FILE \\ --mask-def MASK_DEF_FILE \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX \\ --condition-list VARIANT_ID_FILE \\ --condition-htp HTP1 HTP2 ... Running without LD matrices remeta gene can be run without the required LD matrices by specifying the --ignore-mask-ld and --keep-variants-not-in-ld-mat flags. Note that it is not possible to perform conditional analysis without LD matrices. remeta gene \\ --htp HTP1 HTP2 ... \\ --ignore-mask-ld \\ --keep-variants-not-in-ld-mat \\ --cohorts COHORT1 COHORT2 ... \\ --anno-file ANNO_FILE \\ --set-list SET_LIST_FILE \\ --mask-def MASK_DEF_FILE \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX Specifying allele frequencies remeta provides several options to specify allele frequencies used to build masks. By default, remeta computes on overall allele frequency per variant based on all cohorts where the variant was observed. Alternatively remeta can use a maximum allele frequency observed across cohorts with the --af-strategy max argument. Lastly, remeta allele frequencies can be specifed in an allele frequency file using the --aaf-file argument. See File Formats for a list of available formats. Options Option Argument Type Description --htp FILE1 FILE2 ... Required List of HTP input files. --ld-prefixes FILE1 FILE2 ... Required Prefix to .remeta.gene.ld , .remeta.buffer.ld , and .remeta.ld.idx.gz files per cohort. --cohorts STRING1 STRING2 ... Required List of cohort names per file. --anno-file FILE Required File with variant annotations. Bgzipped and and indexed with index-anno . --set-list FILE Required Regenie set-list file. --mask-def FILE Required Regenie mask-def file. --trait-name STRING Required Name of trait. --trait-type STRING Required One of BT or QT. --out STRING Required Prefix for output files. --burdern-aaf-bins (=0.0001 0.001 0.005 0.01) FLOAT1 FLOAT2 ... Optional Allele frequency cutoffs for building masks for burden testing. --burden-singleton-def (=within) STRING Optional Define singletons for the singleton mask within cohorts or across cohorts. One of 'within', 'across' or 'omit'. --burden-weight-strategy (=uniform) STRING Optional Strategy to compute variant weights for burden testing. One of beta or uniform . --skip-burden FLAG Optional Do not run burden testing. --skato-max-aaf (=0.01) FLOAT Optional Maximum allele frequency for a variant to be included in mask for SKATO. --skato-rho-values (=0 0.01 0.04 0.09 0.16 0.25 0.5 1) FLOAT1 FLOAT2 ... Optional Rho values for SKATO. --skato-min-aac (=1) INT Optional Minimum AAC across cohorts for a variant to be included in a mask for SKATO. --skato-weight-strategy STRING Optional Strategy to compute variant weights for SKATO. One of 'beta' or 'uniform'. --skip-skato FLAG Optional Do not run SKATO. --acatv-max-aaf (=0.01) FLOAT Optional Maximum allele frequency for a variant to be included in mask for ACATV. --acatv-min-aac (=5) INT Optional Minimum AAC across cohorts for a variant to be included in a mask for ACATV. --acatv-weight-strategy STRING Optional Strategy to compute variant weights for ACATV. One of 'beta' or 'uniform'. --skip-acatv STRING Optional Do not run ACATV. --condition-list FILE Optional File with variants to condition on (one per line). --condition-htp FILE1 FILE2 ... Optional List of HTP files with summary statistics of conditional variants per cohort. --af-strategy (=overall) STRING Optional Strategy to compute variant allele frequences. One of 'overall' or 'max'. --aaf-file FILE Optional Use precomputed alternate allele frequencies from an external file. --spa-pval =(0.05) FLOAT Optional Apply SPA when the burden p-value is below spa-pval (BTs only, not applied to ACATV). --spa-ccr =(0.01) FLOAT Optional Apply SPA when # cases / # controls < spa-ccr (BTs only, not applied to ACATV). --chr STRING Optional Run only on specifed chromosome. --gene STRING Optional Run only on specified gene. --extract FILE Optional Include only the variants with IDs listed in this file (one per line). --exclude FILE Optional Exclude variants with IDs listed in this file (one per line). --sources STRING1 STRING2 ... Optional Only meta-analyze variants where the info field SOURCE is one of SOURCE1 SOURCE2 ... --write-cohort-burden-tests FLAG Optional Compute and store per cohort burden tests (ignores changes to --burden-weight-strategy). --write-mask-snplist FLAG Optional Write file with list of variants included in each mask. --recompute-score FLAG Optional Recompute score statistics from betas and standard errors when missing in input. --keep-variants-not-in-ld-mat FLAG Optional Keep variants absent from the LD matrix instead of dropping them. --ignore-mask-ld FLAG Optional Ignore LD between variants in a mask. --threads (=1) INT Optional Number of threads to use. remeta esma Perform effect size meta-analysis (i.e. inverse variance meta-analysis). Effect-size meta-analysis of single variants remeta esma \\ --htp HTP1 HTP2 ... \\ --cohorts COHORT1 COHORT1 ... \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX Options Option Argument Type Description --htp FILE1 FILE2 ... Required List of HTP input files. --cohorts STRING1 STRING2 ... Required List of cohort names per file. --trait-name STRING Required Name of trait. --trait-type STRING Required One of BT or QT. --out STRING Required Prefix for output files. --chr STRING Optional Run only on chromosome CHR. --extract FILE Optional Include only the variants with IDs listed in this file (one per line). --exclude FILE Optional Exclude variants with IDs listed in this file (one per line). --sources STRING1 STRING2 ... Optional Only meta-analyze variants where the info field SOURCE is one of SOURCE1 SOURCE2 ... --source-def FILE Optional Two column file mapping long SOURCE info fields to shorter SOURCE info fields. remeta pvma Perform p-value meta-analysis with either Stouffer's 4 method or Fisher's method 5 . Does not currently use effect direction. Primary use case is to meta-analyze ACATV, SKATO, and SBAT from regenie using standard meta-analysis. It is recommended to run this command with the --skip-beta flag to avoid meta-analyzing single variants with both pvma and esma . P-value meta-analysis of ACATV, SKATO, and SBAT (if ran in regenie) remeta pvma \\ --htp HTP1 HTP2 ... \\ --cohorts COHORT1 COHORT1 ... \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX \\ --skip-beta \\ --method stouffers Options Option Argument Type Description --htp FILE1 FILE2 ... Required List of HTP input files. --cohorts STRING1 STRING2 ... Required List of cohort names per file. --trait-name STRING Required Name of trait. --trait-type STRING Required One of BT or QT. --out STRING Required Prefix for output files. --method (=stouffers) STRING Optional One of stouffers or fishers . --unweighted FLAG Optional Omit sample size weighting (affects stouffers only). --chr STRING Optional Run only on chromosome CHR. --extract FILE Optional Include only the variants with IDs listed in this file (one per line). --exclude FILE Optional Exclude variants with IDs listed in this file (one per line). --skip-beta FLAG Optional Skip entries with an effect size estimate. --sources STRING1 STRING2 ... Optional Only meta-analyze variants where the info field SOURCE is one of SOURCE1 SOURCE2 ... --source-def FILE Optional Two column file mapping long SOURCE info fields to shorter SOURCE info fields. remeta merge Merge results and compute meta-analysis GENE_P 6 . Compute GENE_P from remeta's gene-based tests remeta merge \\ --htp PVMA_HTP ESMA_HTP GENE_HTP1 ... GENE_HTP23 \\ --genep-def GENEP_DEF_FILE \\ --out OUT_PREFIX Compute GENE_P from regenie's gene-based tests (QT with additive model) remeta merge \\ --htp GENE_HTP1 ... GENE_HTP23 \\ --genep-def GENEP_DEF_FILE \\ --burden-model ADD-WGR-LR \\ --acatv-model ADD-WGR-ACATV \\ --skato-model ADD-WGR-SKATO-ACAT \\ --include-sbat \\ --out OUT_PREFIX Compute GENE_P from regenie's gene-based test (BT with additive model using Firth regressoin) remeta merge \\ --htp GENE_HTP1 ... GENE_HTP23 \\ --genep-def GENEP_DEF_FILE \\ --burden-model ADD-WGR-FIRTH \\ --acatv-model ADD-WGR-ACATV \\ --skato-model ADD-WGR-SKATO-ACAT \\ --include-sbat \\ --out OUT_PREFIX Options Option Argument Type Description --htp FILE1 FILE2 ... Required List of HTP input files. --out STRING Required Prefix for output files. --genep-def STRING Optional File with masks to group for GENE_P. --chr STRING Optional Run only on specified chromosome. --burden-model (=REMETA-BURDEN-META) STRING Model column to collapse burden p-values. --acatv-model (=REMETA-ACATV-META) STRING Model column to collapse ACATV p-values. --skato-model (=REMETA-SKATO-META) STRING Model column to collapse SKATO p-values. --include-sbat STRING Optional Include SBAT PVMA in GENE_P if available. remeta compute-ref-ld Compute reference LD matrices from plink2 pgen/pvar/psam files. Reference LD for marginal testing remeta compute-ref-ld \\ --target-pfile PFILE \\ --gene-list GENE_LIST_FILE \\ --skip-buffer \\ --out OUT_PREFIX Reference LD matrices for conditional analysis If imputed variants are in a separate file from the WES variants: remeta compute-ref-ld \\ --target-pfile WES_PFILE \\ --buffer-pfile IMPUTED_PFILE \\ --gene-list GENE_LIST_FILE \\ --buffer-mb 1 \\ --out OUT_PREFIX If imputed variants are in the same file as the WES variants: remeta compute-ref-ld \\ --target-pfile COMBINED_PFILE \\ --target-extract WES_VARIANT_LIST \\ --gene-list GENE_LIST_FILE \\ --buffer-mb 1 \\ --out OUT_PREFIX Note that buffer regions can also be defined in centimorgans using the --buffer-cm option. This requires the --genetic-map argument with a genetic map file in the SHAPEIT format . Options Option Argument Type Description --target-pfile STRING Required Prefix to pgen/pvar/psam files in target regions (typically WES). --gene-list FILE Required List of genes to include in LD matrix in four column format: GENE_NAME CHR START END. --chr STRING Required Chromosome to run. --out STRING Required Prefix for output files. --buffer-pfile STRING Optional Prefix to pgen/pvar/psam files to use for buffer regions (typically array or imputed genotypes). --buffer-mb FLOAT Optional Buffer in Mb around each gene to search for variants to include LD file. --buffer-cm FLOAT Optional Buffer in cM around each gene to search for variants to include in LD file (requires a genetic map). --genetic-map FILE Optional Path to genetic map in three column format: POS CHR CM. Required for --buffer-cm option. --target-r2 (=0.0001) FLOAT Optional Drop target (gene) LD matrix entries where r2 < target_r2. --buffer-r2 (=0.0001) FLOAT Optional Drop buffer (conditional) LD matrix entries where r2 < buffer_r2. --float-size (=1) INT Optional Size of float in bytes to store LD of buffer variants. Possible values: 1, 2, or 4 --block-size (=2048) INT Optional Number of genotypes loaded into memory = 2*block_size. --threads (=1) INT Optional Number of threads for computation. --target-extract FILE Optional Extract list of variants to include in target regions (e.g. exonic variants) --target-exclude FILE Optional Exclude list of variants from target file (e.g. non-coding variants) --target-keep FILE Optional File with list of samples to keep (one sample per line, matching columns of psam file) --target-remove FILE Optional File with list of samples to remove (one per line, matching columns of psam file) --buffer-extract FILE Optional Extract list of variants to include in buffer regions (e.g. imputed variants) --buffer-exclude FILE Optional Exclude list of variants from buffer file (e.g. low quality variants) --skip-buffer FLAG Optional Exclude all buffer variants from LD calculation. remeta index-anno Index annotation files. Files must be bgzipped remeta index-anno --file ANNOTATION_FILE.gz Options Option Argument Type Description --file FILE Required Path to annotation file. --stride INT Required Length in bases between each index pointer. References Lee, S., Abecasis, G. R., Boehnke, M., & Lin, X. (2014). Rare-variant association analysis: study designs and statistical tests. The American Journal of Human Genetics, 95(1), 5-23. \u21a9 Lee, S., Emond, M. J., Bamshad, M. J., Barnes, K. C., Rieder, M. J., Nickerson, D. A., ... & Lin, X. (2012). Optimal unified approach for rare-variant association testing with application to small-sample case-control whole-exome sequencing studies. The American Journal of Human Genetics, 91(2), 224-237. \u21a9 Liu, Y., Chen, S., Li, Z., Morrison, A. C., Boerwinkle, E., & Lin, X. (2019). ACAT: a fast and powerful p value combination method for rare-variant analysis in sequencing studies. The American Journal of Human Genetics, 104(3), 410-421. \u21a9 Stouffer's Method \u21a9 Fisher's Method \u21a9 Ziyatdinov, A., Mbatchou, J., Marcketta, A., Backman, J., Gaynor, S., Zou, Y., ... & Marchini, J. (2024). Joint testing of rare variant burden scores using non-negative least squares. The American Journal of Human Genetics, 111(10), 2139-2149. \u21a9","title":"Documentation"},{"location":"documentation/#documentation","text":"This pages documents the various options for each subprogram in remeta . Usage: remeta [OPTIONS] COMMAND [ARGS]... Options: -h [ --help ] Print this message and exit. -v [ --version ] Print version. Commands: * Meta-Analyses pvma Perform p-value meta-analysis. esma Perform effect size meta-analysis. gene Perform burden, SKATO, and ACATV meta-analysis. merge Merge results and compute meta-analysis GENEP. * Utilities compute-ref-ld Compute a reference LD matrix from plink2 pgen/pvar/psam files. index-anno Create an index from a bgzipped REGENIE annotation file.","title":"Documentation"},{"location":"documentation/#remeta-gene","text":"Perform burden 1 , SKATO 2 , and ACATV 3 meta-analysis. Marginal testing Gene-based meta-analysis requires LD matrices computed by remeta compute-ref-ld . Each matrix is represented by three files: $PREFIX.remeta.gene.ld , $PREFIX.remeta.buffer.ld $PREFIX.remeta.ld.idx.gz . The prefix of each file is passed to the --ld-prefixes argument. These must be in the same order as the --htp and --cohorts arguments. remeta gene \\ --htp HTP1 HTP2 ... \\ --ld-prefixes LD_FILE1 LD_FILE2 ... \\ --cohorts COHORT1 COHORT2 ... \\ --anno-file ANNO_FILE \\ --set-list SET_LIST_FILE \\ --mask-def MASK_DEF_FILE \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX Conditional analysis Conditional analysis can be performed for gene-based tests using the --condition-htp and --condition-list arguments. The --condition-htp argument takes one HTP file per cohort and can be the same files passed to --htp . The --condition-list argument takes a file with variant IDs to condition on (one variant ID per line). remeta gene \\ --htp HTP1 HTP2 ... \\ --ld-prefixes LD_FILE1 LD_FILE2 ... \\ --cohorts COHORT1 COHORT2 ... \\ --anno-file ANNO_FILE \\ --set-list SET_LIST_FILE \\ --mask-def MASK_DEF_FILE \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX \\ --condition-list VARIANT_ID_FILE \\ --condition-htp HTP1 HTP2 ... Running without LD matrices remeta gene can be run without the required LD matrices by specifying the --ignore-mask-ld and --keep-variants-not-in-ld-mat flags. Note that it is not possible to perform conditional analysis without LD matrices. remeta gene \\ --htp HTP1 HTP2 ... \\ --ignore-mask-ld \\ --keep-variants-not-in-ld-mat \\ --cohorts COHORT1 COHORT2 ... \\ --anno-file ANNO_FILE \\ --set-list SET_LIST_FILE \\ --mask-def MASK_DEF_FILE \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX Specifying allele frequencies remeta provides several options to specify allele frequencies used to build masks. By default, remeta computes on overall allele frequency per variant based on all cohorts where the variant was observed. Alternatively remeta can use a maximum allele frequency observed across cohorts with the --af-strategy max argument. Lastly, remeta allele frequencies can be specifed in an allele frequency file using the --aaf-file argument. See File Formats for a list of available formats.","title":"remeta gene"},{"location":"documentation/#options","text":"Option Argument Type Description --htp FILE1 FILE2 ... Required List of HTP input files. --ld-prefixes FILE1 FILE2 ... Required Prefix to .remeta.gene.ld , .remeta.buffer.ld , and .remeta.ld.idx.gz files per cohort. --cohorts STRING1 STRING2 ... Required List of cohort names per file. --anno-file FILE Required File with variant annotations. Bgzipped and and indexed with index-anno . --set-list FILE Required Regenie set-list file. --mask-def FILE Required Regenie mask-def file. --trait-name STRING Required Name of trait. --trait-type STRING Required One of BT or QT. --out STRING Required Prefix for output files. --burdern-aaf-bins (=0.0001 0.001 0.005 0.01) FLOAT1 FLOAT2 ... Optional Allele frequency cutoffs for building masks for burden testing. --burden-singleton-def (=within) STRING Optional Define singletons for the singleton mask within cohorts or across cohorts. One of 'within', 'across' or 'omit'. --burden-weight-strategy (=uniform) STRING Optional Strategy to compute variant weights for burden testing. One of beta or uniform . --skip-burden FLAG Optional Do not run burden testing. --skato-max-aaf (=0.01) FLOAT Optional Maximum allele frequency for a variant to be included in mask for SKATO. --skato-rho-values (=0 0.01 0.04 0.09 0.16 0.25 0.5 1) FLOAT1 FLOAT2 ... Optional Rho values for SKATO. --skato-min-aac (=1) INT Optional Minimum AAC across cohorts for a variant to be included in a mask for SKATO. --skato-weight-strategy STRING Optional Strategy to compute variant weights for SKATO. One of 'beta' or 'uniform'. --skip-skato FLAG Optional Do not run SKATO. --acatv-max-aaf (=0.01) FLOAT Optional Maximum allele frequency for a variant to be included in mask for ACATV. --acatv-min-aac (=5) INT Optional Minimum AAC across cohorts for a variant to be included in a mask for ACATV. --acatv-weight-strategy STRING Optional Strategy to compute variant weights for ACATV. One of 'beta' or 'uniform'. --skip-acatv STRING Optional Do not run ACATV. --condition-list FILE Optional File with variants to condition on (one per line). --condition-htp FILE1 FILE2 ... Optional List of HTP files with summary statistics of conditional variants per cohort. --af-strategy (=overall) STRING Optional Strategy to compute variant allele frequences. One of 'overall' or 'max'. --aaf-file FILE Optional Use precomputed alternate allele frequencies from an external file. --spa-pval =(0.05) FLOAT Optional Apply SPA when the burden p-value is below spa-pval (BTs only, not applied to ACATV). --spa-ccr =(0.01) FLOAT Optional Apply SPA when # cases / # controls < spa-ccr (BTs only, not applied to ACATV). --chr STRING Optional Run only on specifed chromosome. --gene STRING Optional Run only on specified gene. --extract FILE Optional Include only the variants with IDs listed in this file (one per line). --exclude FILE Optional Exclude variants with IDs listed in this file (one per line). --sources STRING1 STRING2 ... Optional Only meta-analyze variants where the info field SOURCE is one of SOURCE1 SOURCE2 ... --write-cohort-burden-tests FLAG Optional Compute and store per cohort burden tests (ignores changes to --burden-weight-strategy). --write-mask-snplist FLAG Optional Write file with list of variants included in each mask. --recompute-score FLAG Optional Recompute score statistics from betas and standard errors when missing in input. --keep-variants-not-in-ld-mat FLAG Optional Keep variants absent from the LD matrix instead of dropping them. --ignore-mask-ld FLAG Optional Ignore LD between variants in a mask. --threads (=1) INT Optional Number of threads to use.","title":"Options"},{"location":"documentation/#remeta-esma","text":"Perform effect size meta-analysis (i.e. inverse variance meta-analysis). Effect-size meta-analysis of single variants remeta esma \\ --htp HTP1 HTP2 ... \\ --cohorts COHORT1 COHORT1 ... \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX","title":"remeta esma"},{"location":"documentation/#options_1","text":"Option Argument Type Description --htp FILE1 FILE2 ... Required List of HTP input files. --cohorts STRING1 STRING2 ... Required List of cohort names per file. --trait-name STRING Required Name of trait. --trait-type STRING Required One of BT or QT. --out STRING Required Prefix for output files. --chr STRING Optional Run only on chromosome CHR. --extract FILE Optional Include only the variants with IDs listed in this file (one per line). --exclude FILE Optional Exclude variants with IDs listed in this file (one per line). --sources STRING1 STRING2 ... Optional Only meta-analyze variants where the info field SOURCE is one of SOURCE1 SOURCE2 ... --source-def FILE Optional Two column file mapping long SOURCE info fields to shorter SOURCE info fields.","title":"Options"},{"location":"documentation/#remeta-pvma","text":"Perform p-value meta-analysis with either Stouffer's 4 method or Fisher's method 5 . Does not currently use effect direction. Primary use case is to meta-analyze ACATV, SKATO, and SBAT from regenie using standard meta-analysis. It is recommended to run this command with the --skip-beta flag to avoid meta-analyzing single variants with both pvma and esma . P-value meta-analysis of ACATV, SKATO, and SBAT (if ran in regenie) remeta pvma \\ --htp HTP1 HTP2 ... \\ --cohorts COHORT1 COHORT1 ... \\ --trait-name MY_TRAIT \\ --trait-type TYPE \\ --out OUT_PREFIX \\ --skip-beta \\ --method stouffers","title":"remeta pvma"},{"location":"documentation/#options_2","text":"Option Argument Type Description --htp FILE1 FILE2 ... Required List of HTP input files. --cohorts STRING1 STRING2 ... Required List of cohort names per file. --trait-name STRING Required Name of trait. --trait-type STRING Required One of BT or QT. --out STRING Required Prefix for output files. --method (=stouffers) STRING Optional One of stouffers or fishers . --unweighted FLAG Optional Omit sample size weighting (affects stouffers only). --chr STRING Optional Run only on chromosome CHR. --extract FILE Optional Include only the variants with IDs listed in this file (one per line). --exclude FILE Optional Exclude variants with IDs listed in this file (one per line). --skip-beta FLAG Optional Skip entries with an effect size estimate. --sources STRING1 STRING2 ... Optional Only meta-analyze variants where the info field SOURCE is one of SOURCE1 SOURCE2 ... --source-def FILE Optional Two column file mapping long SOURCE info fields to shorter SOURCE info fields.","title":"Options"},{"location":"documentation/#remeta-merge","text":"Merge results and compute meta-analysis GENE_P 6 . Compute GENE_P from remeta's gene-based tests remeta merge \\ --htp PVMA_HTP ESMA_HTP GENE_HTP1 ... GENE_HTP23 \\ --genep-def GENEP_DEF_FILE \\ --out OUT_PREFIX Compute GENE_P from regenie's gene-based tests (QT with additive model) remeta merge \\ --htp GENE_HTP1 ... GENE_HTP23 \\ --genep-def GENEP_DEF_FILE \\ --burden-model ADD-WGR-LR \\ --acatv-model ADD-WGR-ACATV \\ --skato-model ADD-WGR-SKATO-ACAT \\ --include-sbat \\ --out OUT_PREFIX Compute GENE_P from regenie's gene-based test (BT with additive model using Firth regressoin) remeta merge \\ --htp GENE_HTP1 ... GENE_HTP23 \\ --genep-def GENEP_DEF_FILE \\ --burden-model ADD-WGR-FIRTH \\ --acatv-model ADD-WGR-ACATV \\ --skato-model ADD-WGR-SKATO-ACAT \\ --include-sbat \\ --out OUT_PREFIX","title":"remeta merge"},{"location":"documentation/#options_3","text":"Option Argument Type Description --htp FILE1 FILE2 ... Required List of HTP input files. --out STRING Required Prefix for output files. --genep-def STRING Optional File with masks to group for GENE_P. --chr STRING Optional Run only on specified chromosome. --burden-model (=REMETA-BURDEN-META) STRING Model column to collapse burden p-values. --acatv-model (=REMETA-ACATV-META) STRING Model column to collapse ACATV p-values. --skato-model (=REMETA-SKATO-META) STRING Model column to collapse SKATO p-values. --include-sbat STRING Optional Include SBAT PVMA in GENE_P if available.","title":"Options"},{"location":"documentation/#remeta-compute-ref-ld","text":"Compute reference LD matrices from plink2 pgen/pvar/psam files. Reference LD for marginal testing remeta compute-ref-ld \\ --target-pfile PFILE \\ --gene-list GENE_LIST_FILE \\ --skip-buffer \\ --out OUT_PREFIX Reference LD matrices for conditional analysis If imputed variants are in a separate file from the WES variants: remeta compute-ref-ld \\ --target-pfile WES_PFILE \\ --buffer-pfile IMPUTED_PFILE \\ --gene-list GENE_LIST_FILE \\ --buffer-mb 1 \\ --out OUT_PREFIX If imputed variants are in the same file as the WES variants: remeta compute-ref-ld \\ --target-pfile COMBINED_PFILE \\ --target-extract WES_VARIANT_LIST \\ --gene-list GENE_LIST_FILE \\ --buffer-mb 1 \\ --out OUT_PREFIX Note that buffer regions can also be defined in centimorgans using the --buffer-cm option. This requires the --genetic-map argument with a genetic map file in the SHAPEIT format .","title":"remeta compute-ref-ld"},{"location":"documentation/#options_4","text":"Option Argument Type Description --target-pfile STRING Required Prefix to pgen/pvar/psam files in target regions (typically WES). --gene-list FILE Required List of genes to include in LD matrix in four column format: GENE_NAME CHR START END. --chr STRING Required Chromosome to run. --out STRING Required Prefix for output files. --buffer-pfile STRING Optional Prefix to pgen/pvar/psam files to use for buffer regions (typically array or imputed genotypes). --buffer-mb FLOAT Optional Buffer in Mb around each gene to search for variants to include LD file. --buffer-cm FLOAT Optional Buffer in cM around each gene to search for variants to include in LD file (requires a genetic map). --genetic-map FILE Optional Path to genetic map in three column format: POS CHR CM. Required for --buffer-cm option. --target-r2 (=0.0001) FLOAT Optional Drop target (gene) LD matrix entries where r2 < target_r2. --buffer-r2 (=0.0001) FLOAT Optional Drop buffer (conditional) LD matrix entries where r2 < buffer_r2. --float-size (=1) INT Optional Size of float in bytes to store LD of buffer variants. Possible values: 1, 2, or 4 --block-size (=2048) INT Optional Number of genotypes loaded into memory = 2*block_size. --threads (=1) INT Optional Number of threads for computation. --target-extract FILE Optional Extract list of variants to include in target regions (e.g. exonic variants) --target-exclude FILE Optional Exclude list of variants from target file (e.g. non-coding variants) --target-keep FILE Optional File with list of samples to keep (one sample per line, matching columns of psam file) --target-remove FILE Optional File with list of samples to remove (one per line, matching columns of psam file) --buffer-extract FILE Optional Extract list of variants to include in buffer regions (e.g. imputed variants) --buffer-exclude FILE Optional Exclude list of variants from buffer file (e.g. low quality variants) --skip-buffer FLAG Optional Exclude all buffer variants from LD calculation.","title":"Options"},{"location":"documentation/#remeta-index-anno","text":"Index annotation files. Files must be bgzipped remeta index-anno --file ANNOTATION_FILE.gz","title":"remeta index-anno"},{"location":"documentation/#options_5","text":"Option Argument Type Description --file FILE Required Path to annotation file. --stride INT Required Length in bases between each index pointer.","title":"Options"},{"location":"documentation/#references","text":"Lee, S., Abecasis, G. R., Boehnke, M., & Lin, X. (2014). Rare-variant association analysis: study designs and statistical tests. The American Journal of Human Genetics, 95(1), 5-23. \u21a9 Lee, S., Emond, M. J., Bamshad, M. J., Barnes, K. C., Rieder, M. J., Nickerson, D. A., ... & Lin, X. (2012). Optimal unified approach for rare-variant association testing with application to small-sample case-control whole-exome sequencing studies. The American Journal of Human Genetics, 91(2), 224-237. \u21a9 Liu, Y., Chen, S., Li, Z., Morrison, A. C., Boerwinkle, E., & Lin, X. (2019). ACAT: a fast and powerful p value combination method for rare-variant analysis in sequencing studies. The American Journal of Human Genetics, 104(3), 410-421. \u21a9 Stouffer's Method \u21a9 Fisher's Method \u21a9 Ziyatdinov, A., Mbatchou, J., Marcketta, A., Backman, J., Gaynor, S., Zou, Y., ... & Marchini, J. (2024). Joint testing of rare variant burden scores using non-negative least squares. The American Journal of Human Genetics, 111(10), 2139-2149. \u21a9","title":"References"},{"location":"file_formats/","text":"File Formats Annotation Files remeta uses many of the same files as regenie to define variant sets. Most annotation files compatible with regenie should also be compatible with remeta . --anno-file 1:55039839:T:C PCSK9 LoF 1:55039842:G:A PCSK9 missense . A file defining variant annotations. Contains 3 whitespace delimited columns: variant id (in CPRA format), gene name, and variant annotation. --set-list A1BG 19 58346922 19:58346922:C:A,19:58346924:G:A,... A1CF 10 50806630 10:50806630:A:G,10:50806630:A:AT,... . A file defining which variants are part of a gene set. Contains 4 whitespace delimited columns: gene name, chromosome, start position, and a comma separated list of variants in the gene. --mask-def LoF LoF missense missense LoF_missense LoF,missense . A file specifying which annotation categories to combine into masks. Contains 2 whitespace delimited columns: mask name, and a comma separated list of variant annotations in a mask. --aaf-file An optional file with variant alternate allele frequencies. If specified, these frequencies are used for building masks. Three formats are supported. All formats assume whitespace separated columns. Two Column Format : CPRA and allele frequency Five Column Format : CPRA, frequency, is singleton (either 0 or 1), chromosome, position Six Column Format (plink2 afreq file): chromosome, CPRA, ref, alt, alt_freqs, and obs_ct Here is an example of the five column format: 7:6187101:C:T 1.53918207864341e-05 0 7 6187101 7:6190395:C:A 2.19920388819247e-06 1 7 6190395 . Reference LD Files --ld-prefix A set of three files named $PREFIX.remeta.gene.ld , $PREFIX.remeta.buffer.ld , and $PREFIX.remeta.ld.idx.gz generated by remeta compute-ref-ld . The index $PREFIX.remeta.ld.idx.gz is bgzipped and human readable. The columns are: GENE_NAME GENE_LD_INDEX BUFFER_LD_INDEX GENE_VARIANTS_STORED BUFFER_VARIANTS_STORED --gene-list PCSK9 1 55039446 55064852 USP24 1 55066358 55215364 . A file listing gene start and end positions. Contains 4 whitespace separated columns: gene name, chromosome, start position, end position. Note that this file must align with the --set-list file for gene-based tests. Specifically, Gene names in the --gene-list file should match gene names in the --set-list file exactly. Any variant in the --set-list must appear within the start position and end position of the LD matrix for that gene: otherwise it will be dropped from the test (unless the --keep-variants-not-in-ld-mat option is specified). The start and end position should be inclusive of any variant that could appear in a test. In particular, it is not recommended to set the start and end positions based on the variants in the set list. If the set list changes, this could result in variants being dropped from a test. In the remeta repository we provide an example gene list under resources/Ensembl100.GRCh38.chr1_23.gene_list.txt.gz directory. This file was created by extracting gene boundaries for protein coding genes annotated in Ensembl release 100. An Ensembl GTF file was downloaded from Ensembl ; start and end positions were extracted from lines with feature gene and the biotype protein_coding . --target-pfile and --buffer-pfile A set of pgen, pvar, and psam files from plink2. --genetic-map A genetic map in the SHAPEIT format. Contains 3 columns: position, chromosome, and centimorgan. Note that genetic maps are available from the SHAPEIT5 repository . Miscellaneous Files --htp A file in htp format, the default output format of remeta . Output by regenie with the --htp option. htp files are whitespace separated with the following columns: Name : Variant name. For remeta , single variants must be encoded CHROM:POS:REF:ALT , matching the naming convention of the annotation files. Chr : Chromosome. Pos : Position. Ref : Reference allele. Alt : Alternate allele. Cohort : Name of the cohort (e.g. UK Biobank). Model : Association model. Effect : Effect size. Note that for binary traits these are odds-ratios, not log odds ratios. LCI_effect : Lower 95% confidence interval for the effect size. UCI_effect : Upper 95% confidence interval for the effect size. Pval : Association p-value. AAF : Alternate allele frequency. Num_Cases : Number of cases. For QTs this is the sample size. Cases_Ref : Number of cases homozygous for the reference allele. Cases_Het : Number of cases who are heterozygotes. Cases_Alt : Number of cases homozygous for the alternate allele. Num_Controls : Number of controls. For QTs this is NA (as are the fields below). Controls_Ref : Number of controls homozygous for the reference allele. Controls_Het : Number of controls who are heterozygotes. Controls_Alt : Number of controls who are homozygous for the alternate allele. Info : A semi-colon (;) separated list of arbitrary fields. These can be KEY=VALUE pairs or a single field alone. --extract and --exclude Files with variant ids (one per line) to include or exclude from meta-analysis. --genep-def LoF LoF NonSyn LoF,missense,LoF_missense . A file defining which masks to combine with ACAT. Contains two space-separated columns: the name of the GENEP set, and a comma separated list of masks to include.","title":"File Formats"},{"location":"file_formats/#file-formats","text":"","title":"File Formats"},{"location":"file_formats/#annotation-files","text":"remeta uses many of the same files as regenie to define variant sets. Most annotation files compatible with regenie should also be compatible with remeta .","title":"Annotation Files"},{"location":"file_formats/#-anno-file","text":"1:55039839:T:C PCSK9 LoF 1:55039842:G:A PCSK9 missense . A file defining variant annotations. Contains 3 whitespace delimited columns: variant id (in CPRA format), gene name, and variant annotation.","title":"--anno-file"},{"location":"file_formats/#-set-list","text":"A1BG 19 58346922 19:58346922:C:A,19:58346924:G:A,... A1CF 10 50806630 10:50806630:A:G,10:50806630:A:AT,... . A file defining which variants are part of a gene set. Contains 4 whitespace delimited columns: gene name, chromosome, start position, and a comma separated list of variants in the gene.","title":"--set-list"},{"location":"file_formats/#-mask-def","text":"LoF LoF missense missense LoF_missense LoF,missense . A file specifying which annotation categories to combine into masks. Contains 2 whitespace delimited columns: mask name, and a comma separated list of variant annotations in a mask.","title":"--mask-def"},{"location":"file_formats/#-aaf-file","text":"An optional file with variant alternate allele frequencies. If specified, these frequencies are used for building masks. Three formats are supported. All formats assume whitespace separated columns. Two Column Format : CPRA and allele frequency Five Column Format : CPRA, frequency, is singleton (either 0 or 1), chromosome, position Six Column Format (plink2 afreq file): chromosome, CPRA, ref, alt, alt_freqs, and obs_ct Here is an example of the five column format: 7:6187101:C:T 1.53918207864341e-05 0 7 6187101 7:6190395:C:A 2.19920388819247e-06 1 7 6190395 .","title":"--aaf-file"},{"location":"file_formats/#reference-ld-files","text":"","title":"Reference LD Files"},{"location":"file_formats/#-ld-prefix","text":"A set of three files named $PREFIX.remeta.gene.ld , $PREFIX.remeta.buffer.ld , and $PREFIX.remeta.ld.idx.gz generated by remeta compute-ref-ld . The index $PREFIX.remeta.ld.idx.gz is bgzipped and human readable. The columns are: GENE_NAME GENE_LD_INDEX BUFFER_LD_INDEX GENE_VARIANTS_STORED BUFFER_VARIANTS_STORED","title":"--ld-prefix"},{"location":"file_formats/#-gene-list","text":"PCSK9 1 55039446 55064852 USP24 1 55066358 55215364 . A file listing gene start and end positions. Contains 4 whitespace separated columns: gene name, chromosome, start position, end position. Note that this file must align with the --set-list file for gene-based tests. Specifically, Gene names in the --gene-list file should match gene names in the --set-list file exactly. Any variant in the --set-list must appear within the start position and end position of the LD matrix for that gene: otherwise it will be dropped from the test (unless the --keep-variants-not-in-ld-mat option is specified). The start and end position should be inclusive of any variant that could appear in a test. In particular, it is not recommended to set the start and end positions based on the variants in the set list. If the set list changes, this could result in variants being dropped from a test. In the remeta repository we provide an example gene list under resources/Ensembl100.GRCh38.chr1_23.gene_list.txt.gz directory. This file was created by extracting gene boundaries for protein coding genes annotated in Ensembl release 100. An Ensembl GTF file was downloaded from Ensembl ; start and end positions were extracted from lines with feature gene and the biotype protein_coding .","title":"--gene-list"},{"location":"file_formats/#-target-pfile-and-buffer-pfile","text":"A set of pgen, pvar, and psam files from plink2.","title":"--target-pfile and --buffer-pfile"},{"location":"file_formats/#-genetic-map","text":"A genetic map in the SHAPEIT format. Contains 3 columns: position, chromosome, and centimorgan. Note that genetic maps are available from the SHAPEIT5 repository .","title":"--genetic-map"},{"location":"file_formats/#miscellaneous-files","text":"","title":"Miscellaneous Files"},{"location":"file_formats/#-htp","text":"A file in htp format, the default output format of remeta . Output by regenie with the --htp option. htp files are whitespace separated with the following columns: Name : Variant name. For remeta , single variants must be encoded CHROM:POS:REF:ALT , matching the naming convention of the annotation files. Chr : Chromosome. Pos : Position. Ref : Reference allele. Alt : Alternate allele. Cohort : Name of the cohort (e.g. UK Biobank). Model : Association model. Effect : Effect size. Note that for binary traits these are odds-ratios, not log odds ratios. LCI_effect : Lower 95% confidence interval for the effect size. UCI_effect : Upper 95% confidence interval for the effect size. Pval : Association p-value. AAF : Alternate allele frequency. Num_Cases : Number of cases. For QTs this is the sample size. Cases_Ref : Number of cases homozygous for the reference allele. Cases_Het : Number of cases who are heterozygotes. Cases_Alt : Number of cases homozygous for the alternate allele. Num_Controls : Number of controls. For QTs this is NA (as are the fields below). Controls_Ref : Number of controls homozygous for the reference allele. Controls_Het : Number of controls who are heterozygotes. Controls_Alt : Number of controls who are homozygous for the alternate allele. Info : A semi-colon (;) separated list of arbitrary fields. These can be KEY=VALUE pairs or a single field alone.","title":"--htp"},{"location":"file_formats/#-extract-and-exclude","text":"Files with variant ids (one per line) to include or exclude from meta-analysis.","title":"--extract and --exclude"},{"location":"file_formats/#-genep-def","text":"LoF LoF NonSyn LoF,missense,LoF_missense . A file defining which masks to combine with ACAT. Contains two space-separated columns: the name of the GENEP set, and a comma separated list of masks to include.","title":"--genep-def"},{"location":"install/","text":"Install Precompiled binary Precompiled binaries are available on the remeta Github . From source remeta requires compilation using g++>=8. It uses the following libraries: HTSlib: http://www.htslib.org/download/ EIGEN: https://eigen.tuxfamily.org/ Intel MKL (optional) https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html Steps to install (Ubuntu 22.04) Install dependencies $ apt-get update && apt-get install build-essential gnupg gpg-agent wget bzip2 apt-transport-https ca-certificates git-all zlib1g-dev libboost-all-dev libz-dev libbz2-dev liblzma-dev libcurl4-openssl-dev libssl-dev libgomp1 libdeflate-dev Install CMake $ wget http://cmake.org/files/cmake-v3.10.0-Linux-x86_64.sh $ ./cmake-v3.10.0-Linux-x86_64.sh Install HTSlib $ wget https://github.com/samtools/htslib/releases/download/1.20/htslib-1.20.tar.bz2 $ tar -xf htslib-1.20.tar.bz2 $ cd htslib-1.20 $ ./configure $ make $ make install Install IntelMKL $ wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB $ cat https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null $ echo \"deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main\" | tee /etc/apt/sources.list.d/oneAPI.list $ apt-get update \\ $ apt-get install -y --no-install-recommends intel-oneapi-mkl-devel \\ $ . /opt/intel/oneapi/setvars.sh \\ $ echo \"MKL_THREADING_LAYER=GNU\" >> /etc/environment Install EIGEN $ wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.bz2 $ tar -xf eigen-3.4.0.tar.bz2 -C /usr/local/lib Build remeta $ git clone https://github.com/rgcgithub/remeta.git $ cd remeta $ cmake . -D EIGEN_PATH=/usr/local/lib/eigen-3.4.0 \\ -D CMAKE_CXX_COMPILER=g++ \\ -D MKLROOT=${MKLROOT} # set by . /opt/intel/oneapi/setvars.sh above $ make remeta With Docker You can also run remeta in docker. A docker image is provided on Github .","title":"Install"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#precompiled-binary","text":"Precompiled binaries are available on the remeta Github .","title":"Precompiled binary"},{"location":"install/#from-source","text":"remeta requires compilation using g++>=8. It uses the following libraries: HTSlib: http://www.htslib.org/download/ EIGEN: https://eigen.tuxfamily.org/ Intel MKL (optional) https://www.intel.com/content/www/us/en/developer/tools/oneapi/onemkl.html","title":"From source"},{"location":"install/#steps-to-install-ubuntu-2204","text":"","title":"Steps to install (Ubuntu 22.04)"},{"location":"install/#install-dependencies","text":"$ apt-get update && apt-get install build-essential gnupg gpg-agent wget bzip2 apt-transport-https ca-certificates git-all zlib1g-dev libboost-all-dev libz-dev libbz2-dev liblzma-dev libcurl4-openssl-dev libssl-dev libgomp1 libdeflate-dev","title":"Install dependencies"},{"location":"install/#install-cmake","text":"$ wget http://cmake.org/files/cmake-v3.10.0-Linux-x86_64.sh $ ./cmake-v3.10.0-Linux-x86_64.sh","title":"Install CMake"},{"location":"install/#install-htslib","text":"$ wget https://github.com/samtools/htslib/releases/download/1.20/htslib-1.20.tar.bz2 $ tar -xf htslib-1.20.tar.bz2 $ cd htslib-1.20 $ ./configure $ make $ make install","title":"Install HTSlib"},{"location":"install/#install-intelmkl","text":"$ wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB $ cat https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null $ echo \"deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main\" | tee /etc/apt/sources.list.d/oneAPI.list $ apt-get update \\ $ apt-get install -y --no-install-recommends intel-oneapi-mkl-devel \\ $ . /opt/intel/oneapi/setvars.sh \\ $ echo \"MKL_THREADING_LAYER=GNU\" >> /etc/environment","title":"Install IntelMKL"},{"location":"install/#install-eigen","text":"$ wget https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.bz2 $ tar -xf eigen-3.4.0.tar.bz2 -C /usr/local/lib","title":"Install EIGEN"},{"location":"install/#build-remeta","text":"$ git clone https://github.com/rgcgithub/remeta.git $ cd remeta $ cmake . -D EIGEN_PATH=/usr/local/lib/eigen-3.4.0 \\ -D CMAKE_CXX_COMPILER=g++ \\ -D MKLROOT=${MKLROOT} # set by . /opt/intel/oneapi/setvars.sh above $ make remeta","title":"Build remeta"},{"location":"install/#with-docker","text":"You can also run remeta in docker. A docker image is provided on Github .","title":"With Docker"},{"location":"tutorial/","text":"Tutorial Meta-analysis with remeta requires 3 steps: Constructing per cohort reference LD matrices with remeta . Computing single variant summary statistics in regenie . Running meta-analysis in remeta . In this example we generate summary statistics for 2 cohorts in regenie , then meta-analyze them with remeta . Example data was simulated with plink2 and is available in the example folder in the remeta repository . For more details on installing and running regenie please visit the regenie documentation . Main remeta workflow Construct reference LD matrices remeta uses per cohort reference LD matrices for gene-based testing. These matrices only need to be generated once and can be reused across traits. remeta takes as input plink2 pgen/pvar/psam files. It outputs a set of three files per chromosome: $PREFIX.remeta.gene.ld , $PREFIX.remeta.buffer.ld $PREFIX.remeta.ld.idx.gz . The index file $PREFIX.remeta.ld.idx.gz is human readable and contains a list of all the variants in the LD matrix of each gene. For marginal testing, only the LD between exome variants is required. A plink2 dataset of exome variants is passed to remeta using the --target-pfile $PLINK2_PREFIX along with the --skip-buffer flag. LD matrices for marginal testing are typically small and quick to compute. In addition to exome variants, gene locations are specified in a --gene-list file that have four columns: GENE_SET_NAME CHR GENE_START_POS GENE_END_POS . See File Formats for more details along with an example file. remeta can also perform gene-based tests conditional on variants in a buffer region around each gene. Conditional analysis requires the LD between exome variants and the LD of variants in the buffer. Imputed variants can be a good choice for conditional analysis. Any variant in a gene or buffer region can be used for conditional analysis so long as it is stored in the LD matrix. How remeta stores LD matrices for conditional analysis remeta has two options for computing the LD of exome variants and imputed variants depending on how they are stored in the input plink2 files. If exome variants and imputed variants are in the same pgen/pvar/psam file, then can be passed to remeta using the --target-pfile argument, and exome variants specified with the --target-extract argument. If exome and imputed variants are stored in separate pgen/pvar/psam files, then they can be passed to remeta using the --target-pfile and --buffer-pfile arguments. Buffer regions can be specified in megabases or centimorgan using the --buffer-mb or --buffer-cm arguments respectively. Note that --buffer-cm requires a genetic map. See File Formats for more details about the genetic map. In the example below, we use simulated data for 500 samples and 2000 variants from 2 cohorts. Genetic data was simulated using the --dummy flag in plink2. The files example.${cohort}.step2.{pgen, pvar, psam} are the simulated genotypes. A subset of simulated genotypes was chosen to represent exome variants, specified in the example/example.${cohort}.step2.exome variant list. Here step 2 refers to the files used when running regenie step 2. for cohort in cohort1 cohort2; do for chr in 1 2; do ./remeta compute-ref-ld \\ --target-pfile example/example.${cohort}.step2 \\ --target-extract example/example.${cohort}.step2.exome \\ --gene-list example/example.genelist \\ --chr ${chr} \\ --out example.${cohort}.chr${chr} \\ --threads `nproc` \\ --buffer-mb 1 done done Generate summary statistics Association statistics are computed in regenie in a two step framework. regenie step 1 fits a whole genome regression model on a subset of variants to account for relatedness, genetic ancestry, and polygenicity. When preparing summary statistics for remeta , these will typically be a subset of common imputed variants. regenie step 2 performs association testing across all variants using the output of step 1. The output of step 2 is passed to remeta for meta-analysis. regenie step 1 For this example we simulated 500 samples and 1000 variants with plink2 to represent a subset of variants used in step 1. These files are: example/example.${cohort}.step1.{pgen,pvar,psam} . This step outputs the files ${cohort}.step1_1.loco and ${cohort}.step1_pred.list used by regenie step 2. for cohort in cohort1 cohort2; do regenie \\ --step 1 \\ --pgen example/example.${cohort}.step1 \\ --phenoFile example/example.${cohort}.pheno.bt.tsv \\ --phenoCol Y \\ --bsize 100 \\ --bt --lowmem \\ --lowmem-prefix tmp_rg \\ --out ${cohort}.step1 done regenie step 2 In this step we use two sets of plink2 files, example/example.${cohort}.step2.{pgen,pvar,psam} , to perform association testing. These are the same files used to generate the reference LD matrices. Note that the --htp $COHORT_NAME options and --minMAC 1 options should be used during step 2. The first option outputs a summary statistics file in htp format. This format has additional meta-data required by remeta . The second option ensures all polymorphic variants are available for gene-based tests. for cohort in cohort1 cohort2; do regenie \\ --step 2 \\ --pgen example/example.${cohort}.step2 \\ --phenoFile example/example.${cohort}.pheno.bt.tsv \\ --phenoCol Y \\ --bt \\ --firth --approx \\ --pred ${cohort}.step1_pred.list \\ --htp ${cohort} \\ --bsize 200 \\ --minMAC 1 \\ --out ${cohort}.step2 done For good performance in remeta we recommended compressing and indexing the output HTP files with bgzip and tabix: for cohort in cohort1 cohort2; do bgzip ${cohort}.step2_Y.regenie tabix -S1 -s2 -b3 -e3 ${cohort}.step2_Y.regenie.gz done Meta-analysis with remeta Meta-analysis with remeta has 3 steps: Run single-variant meta-analysis. Run gene-based meta-analysis across chromosomes. Merge files and compute GENE_P. Run single-variant meta-analysis remeta performs meta-analysis of single variants using effect size meta-analysis. In this example, the two htp files generated by regenie as passed to the --htp argument, and cohort names passed to the --cohort argument. remeta outputs an htp file called example.esma.remeta.gz . ./remeta esma \\ --htp cohort1.step2_Y.regenie.gz cohort2.step2_Y.regenie.gz \\ --cohorts cohort1 cohort2 \\ --trait-name Y \\ --trait-type bt \\ --out example Run gene-based meta-analysis Gene-based tests in remeta are defined using the same annotation files as regenie . A --set-list file defines gene sets, an --anno-file defines variant annotations, and a --mask-def file defines groups of annotations in a mask. See File Formats for more information. remeta provides a small utility to index bgzipped annotation files. Indexing annotations can help improve performance for large-scale analyses. This can be achieved in two commands. bgzip example/example.annotations ./remeta index-anno --file example/example.annotations.gz When running gene-based meta-analysis, exome variants should be specified using --extract argument to avoid including imputed variants in gene-based tests. Alternatively, input htp files with the SOURCE info field can be used to identify variants to include in tests. For example, if exome variants have the info field SOURCE=EXOME , then you can pass the --sources EXOME flag to remeta to extract them. The output of this step are two files in htp format: example.chr{1, 2}.gene.remeta.gz . for chr in 1 2; do ./remeta gene \\ --htp cohort1.step2_Y.regenie.gz cohort2.step2_Y.regenie.gz \\ --ld-prefix example.cohort1.chr${chr} example.cohort2.chr${chr} \\ --cohorts cohort1 cohort2 \\ --extract example/example.exome \\ --chr ${chr} \\ --set-list example/example.setlist \\ --anno-file example/example.annotations.gz \\ --mask-def example/example.masks \\ --trait-name Y \\ --trait-type bt \\ --burden-aaf-bins 0.9 0.99 \\ --acatv-max-aaf 0.99 \\ --skato-max-aaf 0.99 \\ --out example.chr${chr} done Conditional analysis Conditional analysis is performed with the --condition-list and --condition-htp arguments. --condition-list takes a file with a list of variant IDs to condition on. --condition-htp contains the summary statistics of the variants to be conditioned on, which may be the same files passed to --htp . Any variant in a gene or buffer region can be used for conditional analysis. for chr in 1 2; do ./remeta gene \\ --htp cohort1.step2_Y.regenie.gz cohort2.step2_Y.regenie.gz \\ --condition-list example/example.condition_list \\ --condition-htp cohort1.step2_Y.regenie.gz cohort2.step2_Y.regenie.gz \\ --ld-prefix example.cohort1.chr${chr} example.cohort2.chr${chr} \\ --cohorts cohort1 cohort2 \\ --extract example/example.exome \\ --chr ${chr} \\ --set-list example/example.setlist \\ --anno-file example/example.annotations \\ --mask-def example/example.masks \\ --trait-name Y \\ --trait-type bt \\ --burden-aaf-bins 0.9 0.99 \\ --acatv-max-aaf 0.99 \\ --skato-max-aaf 0.99 \\ --out example.conditional.chr${chr} done Merge and compute GENE_P Per chromosome files and additional meta-analysis results can be merged together. Additionally p-values per gene are computed by combining p-values across tests with ACAT. ./remeta merge \\ --htp example.chr1.gene.remeta.gz example.chr2.gene.remeta.gz example.esma.remeta.gz \\ --genep-def example/example.genepdef \\ --out example","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"Meta-analysis with remeta requires 3 steps: Constructing per cohort reference LD matrices with remeta . Computing single variant summary statistics in regenie . Running meta-analysis in remeta . In this example we generate summary statistics for 2 cohorts in regenie , then meta-analyze them with remeta . Example data was simulated with plink2 and is available in the example folder in the remeta repository . For more details on installing and running regenie please visit the regenie documentation . Main remeta workflow","title":"Tutorial"},{"location":"tutorial/#construct-reference-ld-matrices","text":"remeta uses per cohort reference LD matrices for gene-based testing. These matrices only need to be generated once and can be reused across traits. remeta takes as input plink2 pgen/pvar/psam files. It outputs a set of three files per chromosome: $PREFIX.remeta.gene.ld , $PREFIX.remeta.buffer.ld $PREFIX.remeta.ld.idx.gz . The index file $PREFIX.remeta.ld.idx.gz is human readable and contains a list of all the variants in the LD matrix of each gene. For marginal testing, only the LD between exome variants is required. A plink2 dataset of exome variants is passed to remeta using the --target-pfile $PLINK2_PREFIX along with the --skip-buffer flag. LD matrices for marginal testing are typically small and quick to compute. In addition to exome variants, gene locations are specified in a --gene-list file that have four columns: GENE_SET_NAME CHR GENE_START_POS GENE_END_POS . See File Formats for more details along with an example file. remeta can also perform gene-based tests conditional on variants in a buffer region around each gene. Conditional analysis requires the LD between exome variants and the LD of variants in the buffer. Imputed variants can be a good choice for conditional analysis. Any variant in a gene or buffer region can be used for conditional analysis so long as it is stored in the LD matrix. How remeta stores LD matrices for conditional analysis remeta has two options for computing the LD of exome variants and imputed variants depending on how they are stored in the input plink2 files. If exome variants and imputed variants are in the same pgen/pvar/psam file, then can be passed to remeta using the --target-pfile argument, and exome variants specified with the --target-extract argument. If exome and imputed variants are stored in separate pgen/pvar/psam files, then they can be passed to remeta using the --target-pfile and --buffer-pfile arguments. Buffer regions can be specified in megabases or centimorgan using the --buffer-mb or --buffer-cm arguments respectively. Note that --buffer-cm requires a genetic map. See File Formats for more details about the genetic map. In the example below, we use simulated data for 500 samples and 2000 variants from 2 cohorts. Genetic data was simulated using the --dummy flag in plink2. The files example.${cohort}.step2.{pgen, pvar, psam} are the simulated genotypes. A subset of simulated genotypes was chosen to represent exome variants, specified in the example/example.${cohort}.step2.exome variant list. Here step 2 refers to the files used when running regenie step 2. for cohort in cohort1 cohort2; do for chr in 1 2; do ./remeta compute-ref-ld \\ --target-pfile example/example.${cohort}.step2 \\ --target-extract example/example.${cohort}.step2.exome \\ --gene-list example/example.genelist \\ --chr ${chr} \\ --out example.${cohort}.chr${chr} \\ --threads `nproc` \\ --buffer-mb 1 done done","title":"Construct reference LD matrices"},{"location":"tutorial/#generate-summary-statistics","text":"Association statistics are computed in regenie in a two step framework. regenie step 1 fits a whole genome regression model on a subset of variants to account for relatedness, genetic ancestry, and polygenicity. When preparing summary statistics for remeta , these will typically be a subset of common imputed variants. regenie step 2 performs association testing across all variants using the output of step 1. The output of step 2 is passed to remeta for meta-analysis.","title":"Generate summary statistics"},{"location":"tutorial/#regenie-step-1","text":"For this example we simulated 500 samples and 1000 variants with plink2 to represent a subset of variants used in step 1. These files are: example/example.${cohort}.step1.{pgen,pvar,psam} . This step outputs the files ${cohort}.step1_1.loco and ${cohort}.step1_pred.list used by regenie step 2. for cohort in cohort1 cohort2; do regenie \\ --step 1 \\ --pgen example/example.${cohort}.step1 \\ --phenoFile example/example.${cohort}.pheno.bt.tsv \\ --phenoCol Y \\ --bsize 100 \\ --bt --lowmem \\ --lowmem-prefix tmp_rg \\ --out ${cohort}.step1 done","title":"regenie step 1"},{"location":"tutorial/#regenie-step-2","text":"In this step we use two sets of plink2 files, example/example.${cohort}.step2.{pgen,pvar,psam} , to perform association testing. These are the same files used to generate the reference LD matrices. Note that the --htp $COHORT_NAME options and --minMAC 1 options should be used during step 2. The first option outputs a summary statistics file in htp format. This format has additional meta-data required by remeta . The second option ensures all polymorphic variants are available for gene-based tests. for cohort in cohort1 cohort2; do regenie \\ --step 2 \\ --pgen example/example.${cohort}.step2 \\ --phenoFile example/example.${cohort}.pheno.bt.tsv \\ --phenoCol Y \\ --bt \\ --firth --approx \\ --pred ${cohort}.step1_pred.list \\ --htp ${cohort} \\ --bsize 200 \\ --minMAC 1 \\ --out ${cohort}.step2 done For good performance in remeta we recommended compressing and indexing the output HTP files with bgzip and tabix: for cohort in cohort1 cohort2; do bgzip ${cohort}.step2_Y.regenie tabix -S1 -s2 -b3 -e3 ${cohort}.step2_Y.regenie.gz done","title":"regenie step 2"},{"location":"tutorial/#meta-analysis-with-remeta","text":"Meta-analysis with remeta has 3 steps: Run single-variant meta-analysis. Run gene-based meta-analysis across chromosomes. Merge files and compute GENE_P.","title":"Meta-analysis with remeta"},{"location":"tutorial/#run-single-variant-meta-analysis","text":"remeta performs meta-analysis of single variants using effect size meta-analysis. In this example, the two htp files generated by regenie as passed to the --htp argument, and cohort names passed to the --cohort argument. remeta outputs an htp file called example.esma.remeta.gz . ./remeta esma \\ --htp cohort1.step2_Y.regenie.gz cohort2.step2_Y.regenie.gz \\ --cohorts cohort1 cohort2 \\ --trait-name Y \\ --trait-type bt \\ --out example","title":"Run single-variant meta-analysis"},{"location":"tutorial/#run-gene-based-meta-analysis","text":"Gene-based tests in remeta are defined using the same annotation files as regenie . A --set-list file defines gene sets, an --anno-file defines variant annotations, and a --mask-def file defines groups of annotations in a mask. See File Formats for more information. remeta provides a small utility to index bgzipped annotation files. Indexing annotations can help improve performance for large-scale analyses. This can be achieved in two commands. bgzip example/example.annotations ./remeta index-anno --file example/example.annotations.gz When running gene-based meta-analysis, exome variants should be specified using --extract argument to avoid including imputed variants in gene-based tests. Alternatively, input htp files with the SOURCE info field can be used to identify variants to include in tests. For example, if exome variants have the info field SOURCE=EXOME , then you can pass the --sources EXOME flag to remeta to extract them. The output of this step are two files in htp format: example.chr{1, 2}.gene.remeta.gz . for chr in 1 2; do ./remeta gene \\ --htp cohort1.step2_Y.regenie.gz cohort2.step2_Y.regenie.gz \\ --ld-prefix example.cohort1.chr${chr} example.cohort2.chr${chr} \\ --cohorts cohort1 cohort2 \\ --extract example/example.exome \\ --chr ${chr} \\ --set-list example/example.setlist \\ --anno-file example/example.annotations.gz \\ --mask-def example/example.masks \\ --trait-name Y \\ --trait-type bt \\ --burden-aaf-bins 0.9 0.99 \\ --acatv-max-aaf 0.99 \\ --skato-max-aaf 0.99 \\ --out example.chr${chr} done","title":"Run gene-based meta-analysis"},{"location":"tutorial/#conditional-analysis","text":"Conditional analysis is performed with the --condition-list and --condition-htp arguments. --condition-list takes a file with a list of variant IDs to condition on. --condition-htp contains the summary statistics of the variants to be conditioned on, which may be the same files passed to --htp . Any variant in a gene or buffer region can be used for conditional analysis. for chr in 1 2; do ./remeta gene \\ --htp cohort1.step2_Y.regenie.gz cohort2.step2_Y.regenie.gz \\ --condition-list example/example.condition_list \\ --condition-htp cohort1.step2_Y.regenie.gz cohort2.step2_Y.regenie.gz \\ --ld-prefix example.cohort1.chr${chr} example.cohort2.chr${chr} \\ --cohorts cohort1 cohort2 \\ --extract example/example.exome \\ --chr ${chr} \\ --set-list example/example.setlist \\ --anno-file example/example.annotations \\ --mask-def example/example.masks \\ --trait-name Y \\ --trait-type bt \\ --burden-aaf-bins 0.9 0.99 \\ --acatv-max-aaf 0.99 \\ --skato-max-aaf 0.99 \\ --out example.conditional.chr${chr} done","title":"Conditional analysis"},{"location":"tutorial/#merge-and-compute-gene_p","text":"Per chromosome files and additional meta-analysis results can be merged together. Additionally p-values per gene are computed by combining p-values across tests with ACAT. ./remeta merge \\ --htp example.chr1.gene.remeta.gz example.chr2.gene.remeta.gz example.esma.remeta.gz \\ --genep-def example/example.genepdef \\ --out example","title":"Merge and compute GENE_P"}]}